// <auto-generated />
using System;
using CoolForecast.Api.Core.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoolForecast.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoolForecast.Api.Core.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CoolForecast.Api.Core.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PersonnelNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PersonnelNumber")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CoolForecast.Api.Core.Entities.Forecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<uint>("DataOid")
                        .HasColumnType("oid");

                    b.Property<DateTime>("DataUploadTimestampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Forecasts");
                });

            modelBuilder.Entity("CoolForecast.Api.Core.Entities.LayoffForecast", b =>
                {
                    b.Property<Guid>("ForecastId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonnelNumber")
                        .IsRequired()
                        .HasColumnType("character varying(16)");

                    b.Property<double?>("Probability")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("ForecastId");

                    b.HasIndex("PersonnelNumber");

                    b.ToTable("LayoffForecasts");
                });

            modelBuilder.Entity("CoolForecast.Api.Core.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Accuracy")
                        .HasColumnType("double precision");

                    b.Property<double>("AucRoc")
                        .HasColumnType("double precision");

                    b.Property<uint>("DataOid")
                        .HasColumnType("oid");

                    b.Property<double>("F1Score")
                        .HasColumnType("double precision");

                    b.Property<double>("LogLoss")
                        .HasColumnType("double precision");

                    b.Property<double>("MeanSquaredError")
                        .HasColumnType("double precision");

                    b.Property<double>("R2")
                        .HasColumnType("double precision");

                    b.Property<double>("Recall")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("CoolForecast.Api.Core.Entities.Employee", b =>
                {
                    b.HasOne("CoolForecast.Api.Core.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CoolForecast.Api.Core.Entities.LayoffForecast", b =>
                {
                    b.HasOne("CoolForecast.Api.Core.Entities.Forecast", "Forecast")
                        .WithMany()
                        .HasForeignKey("ForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoolForecast.Api.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("PersonnelNumber")
                        .HasPrincipalKey("PersonnelNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Forecast");
                });

            modelBuilder.Entity("CoolForecast.Api.Core.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
